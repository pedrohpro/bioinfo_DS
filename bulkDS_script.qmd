---
title: "bulkDS_script"
format: 
  html: 
    toc: TRUE
editor: visual
author:
  - Pedro Henrique Prado de Oliveira
---

```{r, echo = FALSE}

knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{css, echo = FALSE}

#title h1 {
  background-image: #ffffff; 
  border-radius: 20px;
  border-width: 4px;
  border-color: #000000;
  color: #000000; 
  border-width: 5px; 
  border-style: solid; 
  border-color: #051650; 
  padding-top: 15px;   
  padding-right: 15px; 
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#title h2 {
  background-color: #DDDDDD; 
  color: #000000; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h1 {
  background-color: #051650; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h2 {
  background-color: #0049b7; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h3 {
  background-color: #00aaff; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#deseq h1 {
  background-image: linear-gradient(#051650,  #1e4620); 
  border-radius: 15px; 
  color: #dddddd; 
  border-width: 5px; 
  border-style: solid; 
  border-color: #051650; 
  padding-top: 15px;   
  padding-right: 15px; 
  padding-bottom: 15px;   
  padding-left: 15px
}

#exp h1 {
  background-color: #1e4620; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#exp h2 {
  background-color: #449944; 
  color: #FFF685; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#exp h3 {
  background-color: #abf7b1; 
  color: #777700; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#basic h1 {
  background-color: #240032; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#basic h2 {
  background-color: #7b00b6; 
  color: #FFF685; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dea h1 {
  background-color: #ffba01; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dea h2 {
  background-color: #ffe800; 
  color: #555500; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#gsea h1 {
  background-color: #583001; 
  color: #ffffff; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#gsea h2 {
  background-color: #d97602; 
  color: #ffffff; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}
```

# Bulk RNA-seq of Down Syndrome Astrocytes {#title}

This code will explain all the steps we took to analyze the bulk RNA-seq data from control and down syndrome astrocytes.

The raw data belongs to:

Ponroy Bally, B., Farmer, W. T., Jones, E. V., Jessa, S., Kacerovsky, J. B., Mayran, A., ... & Murai, K. K. (2020). Human iPSC-derived Down syndrome astrocytes display genome-wide perturbations in gene expression, an altered adhesion profile, and increased cellular dynamics. *Human Molecular Genetics*, *29*(5), 785-802. [DOI](https://doi.org/10.1093/hmg/ddaa003)

This is a project by: **Pedro Henrique Prado de Oliveira**

```{r, echo = FALSE}
# Ctrl + L          # clears console   
rm(list = ls())     # clears Environment 
```

# Library importation

```{r}
library(tidyverse)
library(DESeq2)  
library(ComplexHeatmap)
library(data.table)
library(org.Hs.eg.db)
library(biomaRt)
library(RColorBrewer)
library(ggrepel)
library(umap)
library(pheatmap)
library(mdp)
library(kableExtra)
library(readxl)
library(ggvenn)
library(clusterProfiler)
library(pathview)
library(cowplot)
library(GOplot)
library(enrichplot)
library(pathview)
library(gage)
library(gageData)
library(sva) #combatseq
library(webshot2)
library(karyoploteR)
library(vsn)
library(writexl)
library(RColorBrewer)
```

# Data wrangling {#dw}

## Structuring

### Results directory

```{r}
if (!file.exists("results")){
  dir.create("results")
}
```

### data importation

All data was obtained from PRJNA600245 / SRP240925. The FastQs were downloaded with SRA-toolkit, then processed with FastQC, MultiQC, FastP, STAR and FeatureCounts. Futher details are specified in the paper.

**Counts Matrix**

```{r}
# importation (better way?)
cts_brute <- as.data.frame(as.matrix(fread("counts.out", skip = 1, sep = "\t"), rownames = 1, colnames = 1))
cts <- cts_brute

# removing unecessary columns (gene location, etc.)
cts <- cts[,grepl("SRR", colnames(cts))]

# correcting columns names (generalizar!!!)
colnames(cts) <- substring(colnames(cts), 6, 16)

# Tranforming all cts columns into numeric
cts <- mutate_all(cts, as.numeric)

# Adding gene name next to ENSEMBL id with biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
all_features <- getBM(
  attributes = c("ensembl_gene_id", "external_gene_name"),
  filters = "ensembl_gene_id",
  values = rownames(cts),
  mart = ensembl
)
all_features <- all_features[match(rownames(cts), all_features$ensembl_gene_id),] #matching order
all_features$external_gene_name[all_features$external_gene_name == ""] <- "NA"
rownames(cts) <- paste0(all_features$ensembl_gene_id, "|", all_features$external_gene_name)

# Remove all features named as NA
cts <- cts[substring(rownames(cts), 17) != "NA",]

# Duplicated gene names are added together
cts <- as.matrix(cts) # to be able to have duplicated rownames
rownames(cts) <- substring(rownames(cts), 17)
cts <- rowsum(cts, rownames(cts))
cts <- as.data.frame(cts)

# Registering sample genes for downstream functional analysis
sample_genes <- rownames(cts)

```

**Metadata**

```{r}
# importation
meta_brute <- read.delim("sample_metadata.txt", sep = ",", row.names = 1)
meta <- meta_brute

# removing unecessary columns (variables)
meta <- meta[,c("Age","BIOMATERIAL_PROVIDER","BioSample","differentiation_protocol","disease","isolate")]

# Changing "disease" column name to "condition"
colnames(meta)[colnames(meta) == "disease"] <- "condition"
colnames(meta)[colnames(meta) == "isolate"] <- "donor"

# Changing "Control" to "CT" and "Down Syndrome" to "DS"
meta$condition[meta$condition == "Control"] <- "CT"
meta$condition[meta$condition == "Down syndrome"] <- "DS"

# Tranforming all meta columns into factors
meta <- mutate_all(meta, as.factor)
meta$condition <- relevel(meta$condition, ref = "CT") # compare against control
```

**Genes of interest**

```{r}
# importation
down_genes <- read.csv("genes_down.csv", sep = ";")
intGenes <- down_genes$genesofinterest

# Matrix of genes of interest
#View(cts[which(rownames(cts) %in% intGenes),])
```

**Original paper's DE results**

```{r}
res_orig <- read_excel("paper_DE.xlsx")
res_orig <- drop_na(res_orig)

orig_degs_df <- res_orig[abs(res_orig$log2FoldChange) > 1 & res_orig$padj < 0.05,]
orig_degs_df <- orig_degs_df[order(-abs(orig_degs_df$log2FoldChange)),]

degs_orig <- orig_degs_df$gene
top20_orig <- orig_degs_df$gene[1:20]
```

## Pre-processing

### Quality control

```{r}
# Basic gene filtering: more than __ reads for a gene for all samples
cts <- cts[rowSums(cts) > 10,]

# Gene must be expressed in at least 70% of samples
filter <- list()
for (i in 1:nrow(cts)) {
  if((sum(cts[i,] > 0)/ncol(cts)) > 0.7){
    filter <- append(filter, i)
  } 
}
cts <- cts[as.numeric(filter),]
```

# DESeq2 {#deseq}

Ideally the differential expression analysis would be placed after the exploratory analysis and and basic expression analysis, however, because DESeq2 performs normalization and DE altogether, then for the sake of organization it will be placed before exploratory analysis in this case.

<https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html>

Love, M.I., Huber, W., Anders, S. (2014) Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. *Genome Biology*, **15**:550. [10.1186/s13059-014-0550-8](http://dx.doi.org/10.1186/s13059-014-0550-8)

```{r}
# Verifying colnames and rownames match
all(colnames(cts) == rownames(meta))

# Running
dds <- DESeqDataSetFromMatrix(countData = cts, colData = meta, design = ~condition)
dds <- DESeq(dds)
res <- results(dds)
res_df <- as.data.frame(res)

# Getting normalized matrix
ntd <- normTransform(dds)
norm_df <- as.data.frame(assay(ntd))

```

## Identifying DEGs

```{r}
# Adding diffexpressed column to results df
res_df$DEG <- "NO"
res_df$DEG[res_df$log2FoldChange > 1 & res_df$padj < 0.05] <- "UP"
res_df$DEG[res_df$log2FoldChange < -1 & res_df$padj < 0.05] <- "DOWN"
res_df$DEG <- factor(res_df$DEG)

# Top DEGs
degs_df <- res_df[!grepl("NO", res_df$DEG),]
degs_df <- degs_df[order(-abs(degs_df$log2FoldChange)),] #absolute value
degs <- rownames(degs_df)
top20 <- rownames(head(degs_df, 20))
```

# Exploratory analysis {#exp}

## Normalization methods

```{r}
# Verifying normalization methods
#vsd <- vst(dds, blind = F)
#rld <- rlog(dds, blind = F)

normMethod <- meanSdPlot(assay(ntd))$gg + labs(title = "Variance Plot")
print(normMethod)
ggsave("results/variancePlot.png", plot = normMethod, height = 4, width = 5)

  #meanSdPlot(assay(vsd))
#meanSdPlot(assay(rld))
```

## Sample-to-sample distance

```{r}
sampleDists <- dist(t(assay(ntd)))
sampleDistMatrix <- as.matrix(sampleDists)

sampToSamp <- pheatmap(
  sampleDistMatrix,
  main = "Sample to sample distances",
  annotation_col = meta[,c("condition","donor")],
  annotation_row = meta[,c("condition","donor")],
  annotation_names_col = FALSE,
  annotation_names_row = FALSE,
  show_colnames = FALSE,
  clustering_distance_rows = sampleDists,
  clustering_distance_cols = sampleDists,
  col = colorRampPalette(rev(brewer.pal(9, "Blues")))(255),
  angle_col = 45,
)
ggsave("results/sampToSamp.png", plot = sampToSamp, height = 6, width = 8)
```

## Dimensionality reduction

### PCA

```{r}

for (i in colnames(meta)){
  pca_plot <- plotPCA(ntd, intgroup = i) +
    labs(title = "PCA plot", subtitle = paste0("Looking at ", i))
  ggsave(paste0("results/PCA_", i, ".png"), plot = pca_plot, height = 4, width = 5)
  print(pca_plot)
}
```

## Cooks distance

```{r}
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2, main = "Cooks distance")

png(filename = "results/cooks.png", width = 1000, height = 600)
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2, main = "Cooks distance")
dev.off()
```

## Molecular degree perturbation

```{r}
# pheno <- data.frame(matrix(nrow = nrow(meta), ncol = 2))
# pheno$Sample <- rownames(meta)
# pheno$Class <- meta$condition

#mdp(data = cts, pdata = pheno, control_lab = "CT", save_tables = FALSE, file_name = "mdp_")
```

# Basic expression analysis {#basic}

## Box plot

<https://r-graphics.org/recipe-annotate-facet>

```{r}
# Long format for genes of interest
norm_int <- norm_df[rownames(norm_df) %in% intGenes,]
local_int_res <- res_df[rownames(res_df) %in% intGenes,]
local_int_res <- local_int_res[match(rownames(norm_int), rownames(local_int_res)),]
rownames(norm_int)[local_int_res$padj < 0.05] <- paste0(rownames(norm_int)[local_int_res$padj < 0.05], " *") # adding sig asterisk
norm_int["condition",] <- meta$condition
norm_int <- as.data.frame(t(norm_int))
long_int <- norm_int %>% pivot_longer(cols = -condition, names_to = "gene", values_to = "expression")
long_int <- as.data.frame(long_int)
long_int$expression <- as.numeric(long_int$expression)

# Long format for DEGs
norm_degs <- norm_df[rownames(norm_df) %in% top20,]
norm_degs["condition",] <- meta$condition
norm_degs <- as.data.frame(t(norm_degs))
long_degs <- norm_degs %>% pivot_longer(cols = -condition, names_to = "gene", values_to = "expression")
long_degs <- as.data.frame(long_degs)
long_degs$expression <- as.numeric(long_degs$expression)
```

Genes of interest - all together

```{r}
intGene_g <- ggplot(long_int, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ #jitters scatters randomly everytime
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  labs(
    title = "Genes of interest",
    caption = "* significant (DE padj < 0.05)",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )
print(intGene_g)
ggsave("results/intGene_grouped.png", plot = intGene_g, height = 5, width = 25)
```

Genes of interest - separated

```{r}
# include log2FC and padj values for each?
intGene_s <- ggplot(long_int, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ #jitters scatters randomly everytime
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  facet_wrap(~gene, scales = "free")+ # separated box plots
  labs(
    title = "Genes of interest",
    #subtitle = "",
    caption = "* significant (DE padj < 0.05)",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted"),
    strip.background = element_rect(fill="#D1FFBD"),
    axis.text.x = element_blank() #removes bottom gene name
  )
print(intGene_s)
ggsave("results/intGene_separated.png", plot = intGene_s, height = 10, width = 10)
```

DEGs - all together

```{r}
degs_g <- ggplot(long_degs, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ # plotetd behind the boxplot
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  labs(
    title = "Top 20 DEGs",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )
print(degs_g)
ggsave("results/degs_grouped.png", plot = degs_g, height = 5, width = 20)
```

DEGs - separated

```{r}
fc_annots <- data.frame(gene = top20, annot = degs_df[1:20, "log2FoldChange"])
fc_annots$annot <- paste0("log2FC:\n", round(fc_annots$annot,2))
# colocar o padj também na esquerda em cima de cada facet wrap?

degs_s <- ggplot(long_degs, aes(x = gene, y = expression, fill = condition))+
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  facet_wrap(~gene, scales = "free")+
  geom_text(
    x = Inf, y = Inf,
    aes(label = fc_annots$annot[match(gene, fc_annots$gene)]),
    hjust = 1, 
    vjust = 1, 
    size = 3,
    color = "#444444"
  ) +
  labs(
    title = "Top 20 DEGs",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted"),
    strip.background = element_rect(fill="#fffbc8"),
    axis.text.x = element_blank() #removes bottom gene name
  )
print(degs_s)
ggsave("results/degs_separated.png", plot = degs_s, height = 8, width = 12)
```

## Heatmaps

All genes

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (All genes)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = FALSE,
  treeheight_row = 0, # hide dendograms
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE, # remove annotation name next to heatmap
  na_col = "#555555",
  gaps_col = 12,
  color = hcl.colors(50, "BluYl")
)
```

Z-score

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (All genes)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = FALSE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
```

Genes of interest

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% intGenes,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (Genes of interest)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  color = hcl.colors(50, "BluYl")
)
```

Z-score expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% intGenes,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Getting DE padj values
rowannot <- res_df[rownames(res_df) %in% intGenes,c("log2FoldChange","padj")]
rowannot$significance <- "notSig"
rowannot$significance[rowannot$padj < 0.05] <- "sig"
rowannot <- rowannot[match(rownames(norm_sub), rownames(rowannot)),]
rowannot$significance <- as.factor(rowannot$significance)

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Z-score of normalized expression levels by sample (Genes of interest)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_row = rowannot[,c("log2FoldChange","significance")],
  annotation_names_col = FALSE,
  annotation_names_row = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row", # Z-score
  annotation_colors = list(
    log2FoldChange = colorRampPalette(c("#0096c7", "white", "#ff2c2c"))(
        max(abs(rowannot$log2FoldChange)) * sign(rowannot$log2FoldChange)), 
    significance = c(sig = 'lightgreen', notSig = 'white')
  )
)

```

Top 20 DEGs

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% top20,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (Top 20 DEGs)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor","condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12, 
  color = hcl.colors(50, "BluYl")
)
```

Z-score expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% top20,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (Top 20 DEGs)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
```

All DEGs

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% degs,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (All DEGs)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor","condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12, 
  color = hcl.colors(50, "BluYl")
)
```

Z-score

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% degs,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (All DEGs)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
```

# Differential expression analysis {#dea}

## Printing results table

```{r}
# Genes of interest
int_df <- res_df[rownames(res_df) %in% intGenes,]

kable(int_df[order(int_df$padj),], format = "markdown", caption = "Genes of interest") %>%
  kable_styling()
#save_kable(file = "complement_table.png", table)

# Top 20 DEGs
kable(degs_df[1:20,], format = "markdown", caption = "Top 20 DEGs") %>%
  kable_styling()
#save_kable("degs.html", res_table)
```

## MA plot

```{r}
plotMA(res, ylim=c(-7,7))
```

## Volcano plot

Genes of interest

```{r}

# Genes to highlight
res_df$highlight <- rownames(res_df)
res_df$highlight[!(res_df$highlight %in% intGenes)] <- NA

# Plotting
volcano <- ggplot(data = res_df, aes(x = log2FoldChange, y = -log10(padj), col = DEG, label = highlight)) +
  # Log2FC threshold
  geom_vline(xintercept = c(-1, 1), col = "black", linetype = 'dashed') +
  # padj threshold
  geom_hline(yintercept = -log10(0.05), col = "black", linetype = 'dashed') +
  geom_point(size = 2) +
  scale_color_manual(values = c("#00AFBB", "grey", "#bb0c00"),labels = c("Downregulated", "Not significant", "Upregulated")) + 
  coord_cartesian(ylim = c(0, 10), xlim = c(-7, 7)) + # how much zoom
  labs(
    color = "Differential\nexpression",
    x = expression("log"[2]*"FC"), 
    y = expression("-log"[10]*"padj"),
    title = "Differentially expressed genes",
    subtitle = "Comparing DS against CT (|log2fc| > 1, padj < 0.05)"
    ) +
  scale_x_continuous(breaks = seq(-10, 10, 2)) + # to customise the breaks in the x axis
  geom_text_repel(max.overlaps = Inf, color = "black") # To show all labels 

print(volcano)
#ggsave("volcano.png", plot = volcano, height = 10, width = 15)
```

DEGs

```{r}
# Genes to highlight
res_df$highlight <- rownames(res_df)
res_df$highlight[!(res_df$highlight %in% top20)] <- NA

# Plotting
volcano <- ggplot(data = res_df, aes(x = log2FoldChange, y = -log10(padj), col = DEG, label = highlight)) +
  # Log2FC threshold
  geom_vline(xintercept = c(-1, 1), col = "black", linetype = 'dashed') +
  # padj threshold
  geom_hline(yintercept = -log10(0.05), col = "black", linetype = 'dashed') +
  geom_point(size = 2) +
  scale_color_manual(values = c("#00AFBB", "grey", "#bb0c00"),labels = c("Downregulated", "Not significant", "Upregulated")) + 
  coord_cartesian(ylim = c(0, 10), xlim = c(-7, 7)) + # how much zoom
  labs(
    color = "Differential\nexpression",
    x = expression("log"[2]*"FC"), 
    y = expression("-log"[10]*"padj"),
    title = "Differentially expressed genes",
    subtitle = "Comparing DS against CT (|log2fc| > 1, padj < 0.05)"
    ) +
  scale_x_continuous(breaks = seq(-10, 10, 2)) + # to customise the breaks in the x axis
  geom_text_repel(max.overlaps = Inf, color = "black") # To show all labels 

print(volcano)
#ggsave("volcano.png", plot = volcano, height = 10, width = 15)
```

## Karyoplot

<https://bernatgel.github.io/karyoploter_tutorial//Examples/MultipleDataTypes/MultipleDataTypes.html>

```{r}

```

## Manhattan plot

```{r}

```

# Alternative analysis

## Collapsing replicates

```{r}
# Meta collapsed
meta_collapsed <- meta[,c("Age","BIOMATERIAL_PROVIDER","condition","donor")]
meta_collapsed <- meta_collapsed[!duplicated(meta$donor),]
rownames(meta_collapsed) <- meta_collapsed$donor
meta_collapsed <- subset(meta_collapsed, select = -donor)

# cts collapsed (improve)
cts_collapsed <- data.frame(matrix(nrow = nrow(cts), ncol = nlevels(meta$donor)))
colnames(cts_collapsed) <- levels(meta$donor)
rownames(cts_collapsed) <- rownames(cts)
for (i in levels(meta$donor)) {
  cts_collapsed[,i] <- rowSums(cts[, meta$donor == i])
}

# Re-ordering meta_collapsed rows
meta_collapsed <- meta_collapsed[order(meta_collapsed$condition),] 

# Re-ordering cts_collapsed columns
cts_collapsed <- cts_collapsed[,match(rownames(meta_collapsed), colnames(cts_collapsed))]

######################
#   Running DESeq2   #
######################

# Verifying colnames and rownames match
all(colnames(cts_collapsed) == rownames(meta_collapsed))

# Running
dds_collapsed <- DESeqDataSetFromMatrix(countData = cts_collapsed, colData = meta_collapsed, design = ~condition)
dds_collapsed <- DESeq(dds_collapsed)
res_collapsed <- results(dds_collapsed)
res_df_collapsed <- as.data.frame(res_collapsed)

# Getting normalized matrix
ntd_collapsed <- normTransform(dds_collapsed)
norm_df_collapsed <- as.data.frame(assay(ntd_collapsed))

######################
#  Identifying DEGs  #
######################

# Adding diffexpressed column to results df
res_df_collapsed$DEG <- "NO"
res_df_collapsed$DEG[res_df_collapsed$log2FoldChange > 1 & res_df_collapsed$padj < 0.05] <- "UP"
res_df_collapsed$DEG[res_df_collapsed$log2FoldChange < -1 & res_df_collapsed$padj < 0.05] <- "DOWN"
res_df_collapsed$DEG <- factor(res_df_collapsed$DEG)

# Top DEGs
degs_df_collapsed <- res_df_collapsed[!grepl("NO", res_df_collapsed$DEG),]
degs_df_collapsed <- degs_df_collapsed[order(-abs(degs_df_collapsed$log2FoldChange)),]
degs_collapsed <- rownames(degs_df_collapsed)
top20_collapsed <- rownames(head(degs_df_collapsed, 20))

#######################
# Print results table #
#######################

# Genes of interest
int_df_collapsed <- res_df_collapsed[rownames(res_df_collapsed) %in% intGenes,]
kable(int_df_collapsed[order(int_df_collapsed$padj),], format = "html", caption = "Complement genes of interest") %>%
  kable_styling()
#save_kable("complement_table.html", res_table)

# Top 20 DEGs
kable(degs_df_collapsed[1:20,], format = "html", caption = "Top 20 DEGs") %>%
  kable_styling()
#save_kable("degs.html", res_table)
```

## Removing ATCC samples

```{r}

```

## Correcting batch effect

```{r}
ctsAdjCT <- ComBat_seq(
  as.matrix(cts[,meta$condition == "CT"]), 
  batch = meta[meta$condition == "DS",]$donor 
  )

ctsAdjDS <- ComBat_seq(
  as.matrix(cts[,meta$condition == "DS"]), 
  batch = meta[meta$condition == "DS",]$donor 
  )

ctsAdj <- cbind(ctsAdjCT, ctsAdjDS)
ctsAdj <- ctsAdj[,match(colnames(cts), colnames(ctsAdj))]
```

# Comparing results

## Venn Diagram of DEGs

```{r}
# List of lists of DEGs
all_degs <- list(original = degs_orig, replication = degs, collapsed = degs_collapsed)

ggvenn(
  all_degs, 
  fill_color = c("#0073C2FF", "#EFC000FF", "#CD534CFF"),
  stroke_size = 0.5, 
  set_name_size = 4
  )

intersec_degs <- degs_orig[degs_orig %in% degs_collapsed]
intersec_degs <- intersec_degs[intersec_degs %in% degs]

intersec_degs
```

# Functional analysis {#gsea}

GO:0016322 -\> neuron remodelling / synaptic pruning

<https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html>

## Over representation analysis

GO, KEGG and REACTOME.

```{r}
# Finding GO enriched sets
ego <- list()
for (i in c("all", "BP", "CC", "MF")) {
  ego[[i]] <- enrichGO(
    keyType = "SYMBOL",
    gene = degs,
    universe = sample_genes, # sample genes. IMPORTANT!!!
    OrgDb = org.Hs.eg.db,
    ont = i,
    #pAdjustMethod = "bonferroni",
    pvalueCutoff = 0.05,
    qvalueCutoff = 0.05,
    readable = TRUE
  )
}

# Barplots 
BPbar <- barplot(ego$BP, showCategory = 5) + 
  labs(title = "Biological Process") +
  scale_fill_gradient(low = "#36013f", high = "lightblue")
CCbar <- barplot(ego$CC, showCategory = 5) + 
  labs(title = "Cellular Component") +
  scale_fill_gradient(low = "darkred", high = "pink")
MFbar <- barplot(ego$MF, showCategory = 5) + 
  labs(title = "Molecular Function") +
  scale_fill_gradient(low = "darkgreen", high = "lightgreen")

# Ordering DEGs for over representation analysis
geneList <- degs_df$log2FoldChange
names(geneList) <- rownames(degs_df)

# Network plots
BPnet <- cnetplot(ego$BP, foldChange = geneList) + 
  labs(title = "Biological Process") +
  theme(plot.title = element_text(hjust = 0.5))
CCnet <- cnetplot(ego$CC, foldChange = degs_df$log2FoldChange) + 
  labs(title = "Cellular Component") +
  theme(plot.title = element_text(hjust = 0.5))
MFnet <- cnetplot(ego$MF, foldChange = degs_df$log2FoldChange) + 
  labs(title = "Molecular Function") +
  theme(plot.title = element_text(hjust = 0.5))

# Circle plots (careful with order)
BPcirc <- cnetplot(ego$BP, foldChange = degs_df$log2FoldChange, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "Biological Process") +
  theme(plot.title = element_text(hjust = 0.5))
CCcirc <- cnetplot(ego$CC, foldChange = degs_df$log2FoldChange, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "Cellular Component") +
  theme(plot.title = element_text(hjust = 0.5))
MFcirc <- cnetplot(ego$MF, foldChange = degs_df$log2FoldChange, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "Molecular Function") +
  theme(plot.title = element_text(hjust = 0.5))

# EMA plots
# egoBP_pt <- pairwise_termsim(ego$BP)
# egoCC_pt <- pairwise_termsim(ego$CC)
# egoMF_pt <- pairwise_termsim(ego$MF)
# BPema <- emapplot(egoBP_pt)
# CCema <- emapplot(egoCC_pt)
# MFema <- emapplot(egoMF_pt)

# Grouping plots
overRepGO <- plot_grid(
  BPbar, CCbar, MFbar, BPnet, CCnet, MFnet, BPcirc, CCcirc, MFcirc, 
  labels = "AUTO", label_size = 40) +   
  theme(plot.background = element_rect(fill = "white"))
ggsave("overRepGO.png", plot = overRepGO, height = 35, width = 30)

```

## Gene set enrichment analysis

```{r}
# Ordering DEGs for GSEA
aux_df <- degs_df[order(-degs_df$log2FoldChange),]
geneList <- aux_df$log2FoldChange
names(geneList) <- rownames(aux_df)

# Running
ggo <- list()
for (i in c("BP", "CC", "MF")) {
  ggo[[i]] <- gseGO(
    geneList,
    keyType = "SYMBOL",
    OrgDb = org.Hs.eg.db,
    eps = 1e-300, # more precise p-values
    ont = i
    #minGSSize = 100,
    #maxGSSize = 500,
    #pvalueCutoff = 0.05,
    #verbose = FALSE
  )
}


###################################### ARRUMAR!!!!

# p1 <- gseaplot2(ggo$BP, geneSetID = 1, title = ggo$BP@result$Description[1])
# p2 <- gseaplot2(ggo$BP, geneSetID = 2, title = ggo$BP@result$Description[2])
# p3 <- gseaplot2(ggo$BP, geneSetID = 3, title = ggo$BP@result$Description[3])
# p4 <- gseaplot2(ggo$BP, geneSetID = 4, title = ggo$BP@result$Description[4])
# p5 <- gseaplot2(ggo$BP, geneSetID = 5, title = ggo$BP@result$Description[5])
# p6 <- gseaplot2(ggo$BP, geneSetID = 6, title = ggo$BP@result$Description[6])
# 
# 
# 
# gsea_combined <- plot_grid(plotlist = p1, labels = "AUTO")
# ggsave("gsea.png", plot = gsea_combined, height = 30, width = 30)
# 
# gseaplot2(ggo$BP, geneSetID = 1:5)

#gseaplot2(ggo$BP, geneSetID = 1:3, pvalue_table = TRUE, color = c("#E495A5", "#86B875", "#7DB0DD"))

```

## Signaling pathways

```{r}

hsa04110 <- pathview(gene.data  = geneList,
                     pathway.id = "hsa04110",
                     species    = "hsa",
                     limit      = list(gene=max(abs(geneList)), cpd=1))
```

# Exporting results

INKscape para montar imagens pro paper.

```{r}
# Brute counts matrix
write_xlsx(cts_brute, "results/bruteCts.xlsx")
# Filtered counts matrix
write_xlsx(cts, "results/filtCts.xlsx")

# Brute metadata
write_xlsx(meta_brute, "results/bruteMeta.xlsx")
# Cleaned metadata
write_xlsx(meta, "results/cleanMeta.xlsx")

# Differential expression results
write_xlsx(res_df, "results/DEres.xlsx")
# DEGS data frame
write_xlsx(degs_df, "results/DEGs.xlsx")

# Over representation GO results

```
