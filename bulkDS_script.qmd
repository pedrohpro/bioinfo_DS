---
title: "bulkDS_script"
format: 
  html: 
    toc: TRUE
editor: visual
author:
  - Pedro Henrique Prado de Oliveira
---

```{r, echo = FALSE}

knitr::opts_chunk$set(message = FALSE, warning = FALSE) #stops all chunks from displaying messages or warnings
```

```{css, echo = FALSE}

#title h1 {
  background-image: #ffffff; 
  border-radius: 20px;
  border-width: 4px;
  border-color: #000000;
  color: #000000; 
  border-width: 5px; 
  border-style: solid; 
  border-color: #051650; 
  padding-top: 15px;   
  padding-right: 15px; 
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#title h2 {
  background-color: #DDDDDD; 
  color: #000000; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h1 {
  background-color: #051650; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h2 {
  background-color: #0049b7; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dw h3 {
  background-color: #00aaff; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#deseq h1 {
  background-image: linear-gradient(#051650,  #1e4620); 
  border-radius: 15px; 
  color: #dddddd; 
  border-width: 5px; 
  border-style: solid; 
  border-color: #051650; 
  padding-top: 15px;   
  padding-right: 15px; 
  padding-bottom: 15px;   
  padding-left: 15px
}

#exp h1 {
  background-color: #1e4620; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#exp h2 {
  background-color: #449944; 
  color: #FFF685; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#exp h3 {
  background-color: #abf7b1; 
  color: #777700; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#basic h1 {
  background-color: #240032; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#basic h2 {
  background-color: #7b00b6; 
  color: #FFF685; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dea h1 {
  background-color: #ffba01; 
  color: #FFF685;  
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#dea h2 {
  background-color: #ffe800; 
  color: #555500; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#gsea h1 {
  background-color: #583001; 
  color: #ffffff; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}

#gsea h2 {
  background-color: #d97602; 
  color: #ffffff; 
  padding-top: 15px;   
  padding-right: 15px;   
  padding-bottom: 15px;   
  padding-left: 15px;
  border-radius: 15px
}
```

# Bulk RNA-seq of Down Syndrome Astrocytes {#title}

This code will explain all the steps we took to analyze the bulk RNA-seq data from control and down syndrome astrocytes.

The raw data belongs to:

Ponroy Bally, B., Farmer, W. T., Jones, E. V., Jessa, S., Kacerovsky, J. B., Mayran, A., ... & Murai, K. K. (2020). Human iPSC-derived Down syndrome astrocytes display genome-wide perturbations in gene expression, an altered adhesion profile, and increased cellular dynamics. *Human Molecular Genetics*, *29*(5), 785-802. [DOI](https://doi.org/10.1093/hmg/ddaa003)

This is a project by: **Pedro Henrique Prado de Oliveira**

```{r, echo = FALSE}
# Ctrl + L          # clears console   
rm(list = ls())     # clears Environment 
```

# Library importation

```{r}
library(tidyverse) #do it all
library(DESeq2)  
library(ComplexHeatmap)
library(pheatmap)
library(data.table)
library(org.Hs.eg.db) #Homo sapiens OrgDb
library(biomaRt) #gene annotations
library(RColorBrewer)
library(ggrepel)
library(umap)
library(mdp)
library(kableExtra)
library(readxl) #excel
library(writexl) #excel
library(VennDiagram) #venn digrams
library(clusterProfiler) #functional analysis
library(pathview)
library(cowplot)
library(GOplot)
library(enrichplot)
library(gage)
library(gageData)
library(sva) #combatseq
library(webshot2)
library(karyoploteR) #GWAS plots
library(vsn)
library(RColorBrewer)
library(scales)
library(ReactomePA) #REACTOME
```

# Data wrangling {#dw}

## Structuring

### Results directory

```{r}
if (!file.exists("results")){
  dir.create("results")
  dir.create("results/functional")
  dir.create("results/tables")
}
```

### data importation

All data was obtained from PRJNA600245 / SRP240925. The FastQs were downloaded with SRA-toolkit, then processed with FastQC, MultiQC, FastP, STAR and FeatureCounts. Futher details are specified in the paper.

**Counts Matrix**

```{r}
# importation (better way?)
cts_brute <- as.data.frame(as.matrix(fread("counts.out", skip = 1, sep = "\t"), rownames = 1, colnames = 1))
cts <- cts_brute

# removing unecessary columns (gene location, etc.)
cts <- cts[,grepl("SRR", colnames(cts))]

# correcting columns names (generalizar!!!)
colnames(cts) <- substring(colnames(cts), 6, 16)

# Tranforming all cts columns into numeric
cts <- mutate_all(cts, as.numeric)

# Adding gene name next to ENSEMBL id with biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl") #useMart or useEnsembl?
all_features <- getBM(
  attributes = c("ensembl_gene_id", "entrezgene_id", "external_gene_name", "gene_biotype", "chromosome_name", "start_position", "end_position"),
  filters = "ensembl_gene_id",
  values = rownames(cts),
  mart = ensembl
)

# Preparing re-annotation
all_features <- all_features[match(rownames(cts), all_features$ensembl_gene_id),] #matching order
all_features$external_gene_name[all_features$external_gene_name == ""] <- "NA"

# Re-annotating
rownames(cts) <- paste0(all_features$ensembl_gene_id, "|", all_features$external_gene_name)

# Keeping only 23 human chr genes and protein coding genes
cts <- cts[(all_features$chromosome_name %in% c(as.character(seq(1, 22)), "X", "Y") & (all_features$gene_biotype == "protein_coding")),]

# Correcting row metadata df (all_features) - (NOTE: careful with which entrez ids are staying)
all_features <- all_features[(all_features$chromosome_name %in% c(as.character(seq(1, 22)), "X", "Y") & (all_features$gene_biotype == "protein_coding")), -which(colnames(all_features) == "ensembl_gene_id")]
all_features <- all_features[all_features$external_gene_name != "NA",]
all_features <- all_features[!duplicated(all_features$external_gene_name),]
all_features$chromosome_name <- factor(all_features$chromosome_name, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y")) # for better images
all_features$avg_position <- round((all_features$start_position + all_features$end_position)/2)

# Remove all features named as NA
cts <- cts[substring(rownames(cts), 17) != "NA",]

# Duplicated gene names are added together
cts <- as.matrix(cts) # to be able to have duplicated rownames
rownames(cts) <- substring(rownames(cts), 17)
cts <- rowsum(cts, rownames(cts))
cts <- as.data.frame(cts)

```

**Metadata**

```{r}
# importation
meta_brute <- read.delim("sample_metadata.txt", sep = ",", row.names = 1)
meta <- meta_brute

# removing unecessary columns (variables)
meta <- meta[,c("Age","BIOMATERIAL_PROVIDER","BioSample","differentiation_protocol","disease","isolate")]

# Changing "disease" column name to "condition"
colnames(meta)[colnames(meta) == "disease"] <- "condition"
colnames(meta)[colnames(meta) == "isolate"] <- "donor"

# Changing "Control" to "CT" and "Down Syndrome" to "DS"
meta$condition[meta$condition == "Control"] <- "CT"
meta$condition[meta$condition == "Down syndrome"] <- "DS"

# Tranforming all meta columns into factors
meta <- mutate_all(meta, as.factor)
meta$condition <- relevel(meta$condition, ref = "CT") # compare against control
```

**Genes of interest**

```{r}
# importation
down_genes <- read.csv("genes_down.csv", sep = ";")
intGenes <- down_genes$genesofinterest

# Matrix of genes of interest
#View(cts[which(rownames(cts) %in% intGenes),])
```

**Original paper's DE results**

```{r}
res_orig <- read_excel("paper_DE.xlsx")
res_orig <- drop_na(res_orig)

orig_degs_df <- res_orig[abs(res_orig$log2FoldChange) > 1 & res_orig$padj < 0.05,]
orig_degs_df <- orig_degs_df[order(-abs(orig_degs_df$log2FoldChange)),]

degs_orig <- orig_degs_df$gene
top20_orig <- orig_degs_df$gene[1:20]
```

## Pre-processing

### Quality control

```{r}
# Basic gene filtering: more than __ reads for a gene for all samples
cts <- cts[rowSums(cts) > 10,]

# Gene must be expressed in at least 70% of samples
filter <- list()
for (i in 1:nrow(cts)) {
  if((sum(cts[i,] > 0)/ncol(cts)) > 0.7){
    filter <- append(filter, i)
  } 
}
cts <- cts[as.numeric(filter),]

# Filtering genes based on variance by condition???

# Adjusting all_features
all_features <- all_features[all_features$external_gene_name %in% rownames(cts),] 

# Registering sample genes for downstream functional analysis
sample_genes <- rownames(cts)
all_features$entrezgene_id <- as.character(all_features$entrezgene_id)
sample_genes_entrez <- all_features[all_features$external_gene_name %in% sample_genes,]$entrezgene_id
```

# DESeq2 {#deseq}

Ideally the differential expression analysis would be placed after the exploratory analysis and and basic expression analysis, however, because DESeq2 performs normalization and DE altogether, then for the sake of organization it will be placed before exploratory analysis in this case.

<https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html>

Love, M.I., Huber, W., Anders, S. (2014) Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. *Genome Biology*, **15**:550. [10.1186/s13059-014-0550-8](http://dx.doi.org/10.1186/s13059-014-0550-8)

```{r}
# Verifying colnames and rownames match
all(colnames(cts) == rownames(meta))

# Running
dds <- DESeqDataSetFromMatrix(countData = cts, colData = meta, design = ~condition)
dds <- DESeq(dds)
res <- results(dds)
res_df <- as.data.frame(res)

# Adding gene chr location to results_df
all_features <- all_features[match(rownames(res_df), all_features$external_gene_name),] 
res_df$chr <- all_features$chromosome_name
res_df$position <- all_features$avg_position

# Getting normalized matrix
ntd <- normTransform(dds)
norm_df <- as.data.frame(assay(ntd))

```

## Identifying DEGs

```{r}
# Adding diffexpressed column to results df
res_df$DEG <- "NO"
res_df$DEG[res_df$log2FoldChange > 1 & res_df$padj < 0.05] <- "UP"
res_df$DEG[res_df$log2FoldChange < -1 & res_df$padj < 0.05] <- "DOWN"
res_df$DEG <- factor(res_df$DEG)

# Adding alterat column
res_df$alterat <- "NO"
res_df$alterat[res_df$padj < 0.05 & res_df$log2FoldChange > 0] <- "UP"
res_df$alterat[res_df$padj < 0.05 & res_df$log2FoldChange < 0] <- "DOWN"

# Top DEGs
degs_df <- res_df[!grepl("NO", res_df$DEG),]
degs_df <- degs_df[order(-abs(degs_df$log2FoldChange)),] #absolute value
degs_df$DEG <- factor(degs_df$DEG)
degs <- rownames(degs_df)
top20 <- rownames(head(degs_df, 20))
```

# Exploratory analysis {#exp}

## Normalization methods

```{r}
# Verifying normalization methods
#vsd <- vst(dds, blind = F)
#rld <- rlog(dds, blind = F)

normMethod <- meanSdPlot(assay(ntd))$gg + labs(title = "Variance Plot")
print(normMethod)
ggsave("results/variancePlot.png", plot = normMethod, height = 4, width = 5)

  #meanSdPlot(assay(vsd))
#meanSdPlot(assay(rld))
```

## Sample-to-sample distance

```{r}
sampleDists <- dist(t(assay(ntd)))
sampleDistMatrix <- as.matrix(sampleDists)

sampToSamp <- pheatmap(
  sampleDistMatrix,
  main = "Sample to sample distances",
  annotation_col = meta[,c("condition","donor")],
  annotation_row = meta[,c("condition","donor")],
  annotation_names_col = FALSE,
  annotation_names_row = FALSE,
  show_colnames = FALSE,
  clustering_distance_rows = sampleDists,
  clustering_distance_cols = sampleDists,
  col = colorRampPalette(rev(brewer.pal(9, "Blues")))(255),
  angle_col = 45,
)
ggsave("results/sampToSamp.png", plot = sampToSamp, height = 6, width = 8)
```

## Dimensional reduction

### PCA

```{r}

for (i in colnames(meta)){
  pca_plot <- plotPCA(ntd, intgroup = i) +
    labs(title = "PCA plot", subtitle = paste0("Looking at ", i))+
    theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )
  
  ggsave(paste0("results/PCA_", i, ".png"), plot = pca_plot, height = 4, width = 5)
  print(pca_plot)
}
```

## Cooks distance

```{r}
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2, main = "Cooks distance")

png(filename = "results/cooks.png", width = 1000, height = 600)
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2, main = "Cooks distance")
dev.off()
```

## Molecular degree perturbation

```{r}
# pheno <- data.frame(matrix(nrow = nrow(meta), ncol = 2))
# pheno$Sample <- rownames(meta)
# pheno$Class <- meta$condition

#mdp(data = cts, pdata = pheno, control_lab = "CT", save_tables = FALSE, file_name = "mdp_")
```

# Basic expression analysis {#basic}

## Box plot

<https://r-graphics.org/recipe-annotate-facet>

```{r}
# Long format for genes of interest
norm_int <- norm_df[rownames(norm_df) %in% intGenes,]
local_int_res <- res_df[rownames(res_df) %in% intGenes,]
local_int_res <- local_int_res[match(rownames(norm_int), rownames(local_int_res)),]
rownames(norm_int)[local_int_res$padj < 0.05] <- paste0(rownames(norm_int)[local_int_res$padj < 0.05], " *") # adding sig asterisk
rownames(norm_int)[local_int_res$padj < 0.05 & abs(local_int_res$log2FoldChange) > 1] <- paste0(rownames(norm_int)[local_int_res$padj < 0.05 & abs(local_int_res$log2FoldChange) > 1], "*") # adding sig asterisk for DEGs only
norm_int["condition",] <- meta$condition
norm_int <- as.data.frame(t(norm_int))
long_int <- norm_int %>% pivot_longer(cols = -condition, names_to = "gene", values_to = "expression")
long_int <- as.data.frame(long_int)
long_int$expression <- as.numeric(long_int$expression)

# Long format for DEGs
norm_degs <- norm_df[rownames(norm_df) %in% top20,]
norm_degs["condition",] <- meta$condition
norm_degs <- as.data.frame(t(norm_degs))
long_degs <- norm_degs %>% pivot_longer(cols = -condition, names_to = "gene", values_to = "expression")
long_degs <- as.data.frame(long_degs)
long_degs$expression <- as.numeric(long_degs$expression)
```

Genes of interest - all together

```{r}
intGene_g <- ggplot(long_int, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ #jitters scatters randomly everytime
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  labs(
    title = "Genes of interest",
    caption = "* significant (DE padj < 0.05), ** significant and DEG (|log2fc| > 1)",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )
print(intGene_g)
ggsave("results/intGene_grouped.png", plot = intGene_g, height = 5, width = 25)
```

Genes of interest - separated

```{r}
fc_annots <- res_df[rownames(res_df) %in% intGenes,c("log2FoldChange","padj")]
colnames(fc_annots)[colnames(fc_annots) == "log2FoldChange"] <- "log2fc"

fc_annots$color <- "#D1FFBD"
fc_annots$color[fc_annots$padj < 0.05] <- "#FFFFCC"
fc_annots$color[fc_annots$padj < 0.05 & abs(fc_annots$log2fc) > 1] <- "#FFD0D6"

rownames(fc_annots)[fc_annots$padj < 0.05] <- paste0(rownames(fc_annots)[fc_annots$padj < 0.05], " *")
rownames(fc_annots)[fc_annots$padj < 0.05 & abs(fc_annots$log2fc) > 1] <- paste0(rownames(fc_annots)[fc_annots$padj < 0.05 & abs(fc_annots$log2fc) > 1], "*")
fc_annots$log2fc <- paste0("log2FC:\n", round(fc_annots$log2fc,2))
fc_annots$padj <- paste0("padj:\n", signif(fc_annots$padj, digits=2))
fc_annots$gene <- rownames(fc_annots)

# include log2FC and padj values for each?
intGene_s <- ggplot(long_int, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ #jitters scatters randomly everytime
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  facet_wrap(~gene, scales = "free")+ # separated box plots
  geom_text( # log2fc annotation
    x = Inf, y = Inf,
    aes(label = fc_annots$log2fc[match(gene, fc_annots$gene)]),
    hjust = 1, 
    vjust = 1, 
    size = 3,
    color = "#006400"
  ) +
  geom_text( # padj annotation
    aes(label = fc_annots$padj[match(gene, fc_annots$gene)]),
    x = -Inf, y = Inf,
    hjust = 0,
    vjust = 1,
    size = 3,
    color = "#006400"
  ) +
  labs(
    #title = "Genes of interest",
    #subtitle = "",
    #caption = "* significant (DE padj < 0.05), ** significant and DEG (|log2fc| > 1)",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted"),
    strip.background = element_rect(fill="#D1FFBD"),
    axis.text.x = element_blank() #removes bottom gene name
  )

print(intGene_s)
ggsave("results/intGene_separated.png", plot = intGene_s, height = 12, width = 15)
```

DEGs - all together

```{r}
degs_g <- ggplot(long_degs, aes(x = gene, y = expression, fill = condition)) +
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+ # plotetd behind the boxplot
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  labs(
    title = "Top 20 DEGs",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )
print(degs_g)
ggsave("results/degs_grouped.png", plot = degs_g, height = 5, width = 20)
```

DEGs - separated

```{r}
fc_annots <- data.frame(gene = top20, log2fc = degs_df[1:20, "log2FoldChange"], padj = degs_df[1:20, "padj"])
fc_annots$log2fc <- paste0("log2FC:\n", round(fc_annots$log2fc,2))
fc_annots$padj <- paste0("padj:\n", signif(fc_annots$padj, digits=2))

degs_s <- ggplot(long_degs, aes(x = gene, y = expression, fill = condition))+
  geom_point(position = position_jitterdodge(jitter.width=0.2), color = "#550000", size = 1, alpha = 0.9)+
  geom_boxplot(alpha = 0.5)+ # because points are behind decrease opacity
  facet_wrap(~gene, scales = "free")+
  geom_text( # log2fc annotation
    x = Inf, y = Inf,
    aes(label = fc_annots$log2fc[match(gene, fc_annots$gene)]),
    hjust = 1, 
    vjust = 1, 
    size = 3,
    color = "#006400"
  ) +
  geom_text( # padj annotation
    aes(label = fc_annots$padj[match(gene, fc_annots$gene)]),
    x = -Inf, y = Inf,
    hjust = 0,
    vjust = 1,
    size = 3,
    color = "#006400"
  ) +
  labs(
    title = "Top 20 DEGs",
    x = NULL,
    y = "DESeq2 normalized expression"
  )+ 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted"),
    strip.background = element_rect(fill="#fffbc8"),
    axis.text.x = element_blank() #removes bottom gene name
  )
print(degs_s)
ggsave("results/degs_separated.png", plot = degs_s, height = 8, width = 12)
```

## Heatmaps

All genes

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
allgenes_exp <- pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (All genes)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = FALSE,
  treeheight_row = 0, # hide dendograms
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE, # remove annotation name next to heatmap
  na_col = "#555555",
  gaps_col = 12,
  color = hcl.colors(50, "BluYl")
)
print(allgenes_exp)
ggsave("results/allgenes_exp.png", plot = allgenes_exp, height = 5, width = 8)
```

Z-score

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
allgenes_zscore <- pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (All genes)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = FALSE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
print(allgenes_zscore)
ggsave("results/allgenes_zscore.png", plot = allgenes_zscore, height = 5, width = 8)
```

Genes of interest

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% intGenes,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
intgenes_exp <- pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (Genes of interest)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  color = hcl.colors(50, "BluYl")
)
print(intgenes_exp)
ggsave("results/intgenes_exp.png", plot = intgenes_exp, height = 8, width = 8)
```

Z-score expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% intGenes,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Getting DE padj values
rowannot <- res_df[rownames(res_df) %in% intGenes,c("log2FoldChange","padj")]
rowannot$significance <- "notSig"
rowannot$significance[rowannot$padj < 0.05] <- "sig"
rowannot <- rowannot[match(rownames(norm_sub), rownames(rowannot)),]
rowannot$significance <- as.factor(rowannot$significance)

# Plotting heatmap
intgenes_zscore <- pheatmap(
  norm_sub,
  main = "Z-score of normalized expression levels by sample (Genes of interest)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_row = rowannot[,c("log2FoldChange","significance")],
  annotation_names_col = FALSE,
  annotation_names_row = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row", # Z-score
  annotation_colors = list(
    log2FoldChange = colorRampPalette(c("#0096c7", "white", "#ff2c2c"))(
        max(abs(rowannot$log2FoldChange)) * sign(rowannot$log2FoldChange)), 
    significance = c(sig = 'lightgreen', notSig = 'white')
  )
)
print(intgenes_zscore)
ggsave("results/intgenes_zscore.png", plot = intgenes_zscore, height = 8, width = 8)
```

Top 20 DEGs

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% top20,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
top20_exp <- pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (Top 20 DEGs)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor","condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12, 
  color = hcl.colors(50, "BluYl")
)
print(top20_exp)
ggsave("results/top20_exp.png", plot = top20_exp, height = 8, width = 8)
```

Z-score expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% top20,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
top20_zscore <- pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (Top 20 DEGs)",
  cluster_rows = TRUE, 
  show_rownames = TRUE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
print(top20_zscore)
ggsave("results/top20_zscore.png", plot = top20_zscore, height = 8, width = 8)
```

All DEGs

Normalized expression

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% degs,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
alldegs_exp <- pheatmap(
  norm_sub,
  main = "Normalized expression levels by sample (All DEGs)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor","condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12, 
  color = hcl.colors(50, "BluYl")
)
print(alldegs_exp)
ggsave("results/alldegs_exp.png", plot = alldegs_exp, height = 8, width = 8)
```

Z-score

```{r}
# Selecting only desired genes
norm_sub <- assay(ntd)[rownames(ntd) %in% degs,]

# Relocating expression columns and metadata rows to group same condition samples 
local_meta <- arrange(meta, condition, donor, differentiation_protocol)
norm_sub <- norm_sub[,match(rownames(local_meta), colnames(norm_sub))]

# Plotting heatmap
alldegs_zscore <- pheatmap(
  norm_sub,
  main = "Z-score of expression levels by sample (All DEGs)",
  cluster_rows = TRUE, 
  show_rownames = FALSE, 
  cluster_cols = FALSE,
  show_colnames = TRUE,
  treeheight_row = 0,
  #labels_col = sapply(1:24, function(i) paste0("S", i), simplify = FALSE), # colnanmes
  angle_col = 45,
  fontsize_col = 9,
  annotation_col = local_meta[,c("differentiation_protocol","donor", "condition")],
  annotation_names_col = FALSE,
  na_col = "#555555",
  gaps_col = 12,
  scale = "row" # Z-score
)
print(alldegs_zscore)
ggsave("results/alldegs_zscore.png", plot = alldegs_zscore, height = 8, width = 8)
```

# Differential expression analysis {#dea}

## Printing results table

```{r}
# Genes of interest
int_df <- res_df[rownames(res_df) %in% intGenes,]

kable(int_df[order(int_df$padj),], format = "markdown", caption = "Genes of interest") %>%
  kable_styling()
#save_kable(file = "complement_table.png", table)

# Top 20 DEGs
kable(degs_df[1:20,], format = "markdown", caption = "Top 20 DEGs") %>%
  kable_styling()
#save_kable("degs.html", res_table)
```

## MA plot

```{r}
plotMA(res, ylim=c(-7,7), main = "MA plot")

png(filename = "results/MAplot.png", width = 700, height = 600)
plotMA(res, ylim=c(-7,7), main = "MA plot")
dev.off()
```

## Volcano plot

Genes of interest

```{r}

# Genes to highlight
res_df$highlight <- rownames(res_df)
res_df$highlight[!(res_df$highlight %in% c("APP","C3","CFI","C4A","C4B","IFNAR1","IFNAR2","IL10RB","IL6","S100B","SOD1"))] <- NA

# Plotting
volcano_intgenes <- ggplot(data = res_df, aes(x = log2FoldChange, y = -log10(padj), col = DEG, label = highlight)) +
  # Log2FC threshold line
  geom_vline(xintercept = c(-1, 1), col = "black", linetype = 'dashed') +
  # padj threshold line
  geom_hline(yintercept = -log10(0.05), col = "black", linetype = 'dashed') +
  # dot size
  geom_point(size = 1.5) +
  # color
  scale_color_manual(values = c("#00AFBB", "grey", "#bb0c00"),labels = c("DOWN", "NO", "UP")) + 
  # zoom
  coord_cartesian(ylim = c(0, max(-log10(res_df$padj))), xlim = c(min(res_df$log2FoldChange), max(res_df$log2FoldChange))) +
  labs(
    color = "DEG",
    x = expression("log"[2]*"FC"), 
    y = expression("-log"[10]*"padj")
    #title = "Differentially expressed genes",
    #subtitle = "Comparing DS against CT (|log2fc| > 1, padj < 0.05)"
    ) +
  scale_x_continuous(breaks = seq(-10, 10, 2)) + # to customise the breaks in the x axis
  geom_text_repel(max.overlaps = Inf, color = "black")+ # To show all labels 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )

print(volcano_intgenes)
ggsave("results/volcano_intgenes.png", plot = volcano_intgenes, height = 6, width = 8)
```

DEGs

```{r}
# Genes to highlight
res_df$highlight <- rownames(res_df)
res_df$highlight[!(res_df$highlight %in% top20)] <- NA

# Plotting
volcano_top20 <- ggplot(data = res_df, aes(x = log2FoldChange, y = -log10(padj), col = DEG, label = highlight)) +
  # Log2FC threshold
  geom_vline(xintercept = c(-1, 1), col = "black", linetype = 'dashed') +
  # padj threshold
  geom_hline(yintercept = -log10(0.05), col = "black", linetype = 'dashed') +
  geom_point(size = 2) +
  scale_color_manual(values = c("#00AFBB", "grey", "#bb0c00"),labels = c("DOWN", "NO", "UP")) + 
  coord_cartesian(ylim = c(0, max(-log10(res_df$padj))), xlim = c(min(res_df$log2FoldChange), max(res_df$log2FoldChange))) + # how much zoom
  labs(
    color = "DEG",
    x = expression("log"[2]*"FC"), 
    y = expression("-log"[10]*"padj")
    #title = "Differentially expressed genes",
    #subtitle = "Comparing DS against CT (|log2fc| > 1, padj < 0.05)"
    ) +
  scale_x_continuous(breaks = seq(-10, 10, 2)) + # to customise the breaks in the x axis
  geom_text_repel(max.overlaps = Inf, color = "black")+ # To show all labels 
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )

print(volcano_top20)
ggsave("results/volcano_top20.png", plot = volcano_top20, height = 6, width = 8)
```

## GWAS plots

### Karyoplot

<https://bernatgel.github.io/karyoploter_tutorial//Examples/MultipleDataTypes/MultipleDataTypes.html>

```{r}
# Preparing the df
local_res_df <- res_df[res_df$chr == "21",]
local_res_df$chr <- paste0("chr", local_res_df$chr)
local_res_df$color <- local_res_df$alterat
local_res_df$color[local_res_df$color == "DOWN"] <- "#00AFBB"
local_res_df$color[local_res_df$color == "NO"] <- "#cccccc"
local_res_df$color[local_res_df$color == "UP"] <- "#bb0c00"

# Selecting genes to highlight
aux1_df <- local_res_df[local_res_df$alterat != "NO",]
aux1_df <- aux1_df[order(-abs(aux1_df$log2FoldChange)),]
aux1_df <- aux1_df[1:5,] # top 5 highest signif log2fc
aux2_df <- local_res_df[rownames(local_res_df) %in% intGenes,] # genes of interest from chr21
local_highlight_df <- rbind(aux1_df, aux2_df)

# Initializing save plot
png(filename = "results/karyoplot.png", width = 1500, height = 500)

# Plotting
kp <- plotKaryotype(genome="hg38", chromosomes="chr21", main = "Gene alterations in the chromosome 21", cex = 2)

kpAddCytobandLabels(kp, 
  force.all = TRUE, #all name sections of the chromosome
  srt = 90, 
  cex = 1, 
  col = c(rep("black", times = 6), "white", rep("black", times = 7)) #to contrast the backgorund better
)

kpPoints(kp, 
  data = local_res_df, 
  chr = local_res_df$chr, 
  x = local_res_df$position, 
  y = local_res_df$log2FoldChange, 
  ymax = 3, #max(local_res_df$log2FoldChange), 
  ymin = -3, #min(local_res_df$log2FoldChange),
  col = as.character(local_res_df$color),
  cex = 1.8
)

kpAxis(kp, 
  ymax = 3, #max(local_res_df$log2FoldChange), 
  ymin = -3, #min(local_res_df$log2FoldChange),
  tick.pos = NULL, #c(0, max(local_res_df$log2FoldChange), min(local_res_df$log2FoldChange), max(local_res_df$log2FoldChange)/2, min(local_res_df$log2FoldChange)/2),
  numticks = 7, 
  cex = 0.9
)

kpAbline(kp, h = 0.5) # this might to be adjusted with kpAxis()

kpAddLabels(kp, 
  labels = "log2 Fold Change", 
  srt = 90, 
  pos = 1, 
  label.margin = 0.04,
  cex = 1.5
  #ymax = max(local_res_df$log2FoldChange), 
  #ymin = min(local_res_df$log2FoldChange)
)

kpPlotMarkers(kp, 
  chr = "chr21",
  x = local_highlight_df$position, 
  y = rescale(local_highlight_df$log2FoldChange, from = c(-3, 3), to = c(-4, 1)),
  labels = rownames(local_highlight_df), 
  cex = 1.2, 
  r0 = 0.8,
  line.color = NULL,
  text.orientation = "vertical",
  adjust.label.position = TRUE
)

# kpSegments(kp, 
#   chr = "chr21", 
#   x0 = local_highlight_df$position,
#   x1 = local_highlight_df$position,
#   y0 = local_highlight_df$log2FoldChange,
#   y1 = max(local_res_df$log2FoldChange),
#   ymax = max(local_res_df$log2FoldChange),
#   ymin = min(local_res_df$log2FoldChange),
#   r0 = 0.8
# )

# Closing save plot
dev.off()

```

### Manhattan plot

<https://r-graph-gallery.com/101_Manhattan_plot.html>

```{r}
# All signif gene alterations
manhat <- ggplot(res_df, aes(x = chr, y = log2FoldChange, color = alterat, label = highlight))+
  # geom_rect(
  #   data = data.frame(
  #     xMin = seq(from = 0.5, by = 2, length.out = 12),
  #     xMax = seq(from = 1.5, by = 2, length.out = 12),
  #     yMin = rep(-9, times = 12),
  #     yMax = rep(9, times = 12)
  #   ),
  #   aes(xmin = xMin, xmax = xMax, ymin = yMin, ymax = yMax),
  #   fill = '#dddddd'
  # )+
  geom_jitter(size = 0.6)+
  labs(
    title = "Significantly altered genes across chromosomes",
    x = "Chromosome",
    y = "Log2 Fold Change",
    color = NULL
  )+ 
  scale_color_manual(values = c("DOWN" = "#00AFBB", "NO" = "#aaaaaa", "UP" = "#bb0c00")) +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid = element_line(color = "gray", linetype = "dotted")
  )+
  geom_text_repel(max.overlaps = Inf, color = "black", size = 2) # To show all labels

print(manhat)
ggsave("results/manhat.png", plot = manhat, height = 5, width = 10)


#make one manhattan plot highlighting the genes on interest
```

### Alterations by Chromosome plot

```{r}
# Transforming cluster and sample columns into table format
tab_chr <- as.data.frame(table(chr = degs_df$chr, cond = degs_df$DEG))
tab_chr$cond <- relevel(tab_chr$cond, ref = "UP") # for up to be on top
tab_chr$pct <- ave(tab_chr$Freq, tab_chr$chr, FUN = function(x) (x / sum(x)) * 100) # percentage

# For all genes
all_chr <- as.data.frame(table(chr = res_df$chr, cond = res_df$DEG))
all_chr$cond <- factor(all_chr$cond, levels = c("UP","DOWN","NO")) # for up to be on top
all_chr$pct <- ave(all_chr$Freq, all_chr$chr, FUN = function(x) (x / sum(x)) * 100)

# For all significant
alt_chr <- as.data.frame(table(chr = res_df$chr, cond = res_df$alterat))
alt_chr$cond <- factor(alt_chr$cond, levels = c("UP","DOWN","NO")) # for up to be on top
alt_chr$pct <- ave(alt_chr$Freq, alt_chr$chr, FUN = function(x) (x / sum(x)) * 100)

# All filtered genes in this study
chr_allfeat <- as.data.frame(table(chr = all_features$chromosome_name))
```

Absolute value

```{r}
# Plot the bar plot
ndegs <- ggplot(tab_chr, aes(x = chr, y = Freq, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(label = paste0(round(percentage, 1), "%")), 
    #position = position_stack(vjust = 0.5),
    #size = 3, 
    #color = "black") +
  labs(title = "Proportion of DEGs across chromosomes",
    x = "Chromosome",
    y = "Number of genes",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9")) +
  theme_minimal()

print(ndegs)
ggsave("results/ndegs.png", plot = ndegs, height = 3, width = 7)

# All genes by chromosomes
ngenes <- ggplot(chr_allfeat, aes(x = chr, y = Freq)) +
  geom_bar(stat = "identity", fill = "#52a447") +
  labs(title = "Total number of genes by chromosome (after filtering)",
    x = "Chromosome",
    y = "Number of genes",
  ) +
  theme_minimal()

print(ngenes)
ggsave("results/ngenes.png", plot = ngenes, height = 3, width = 7)

# DEGs over all genes
degsallgenes <- ggplot(all_chr, aes(x = chr, y = Freq, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(label = paste0(round(percentage, 1), "%")), 
    #position = position_stack(vjust = 0.5),
    #size = 3, 
    #color = "black") +
  labs(title = "Number of DEGs across chromosomes",
    x = "Chromosome",
    y = "Number of genes",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9", "NO" = "yellow")) +
  theme_minimal()

print(degsallgenes)
ggsave("results/degsallgenes.png", plot = degsallgenes, height = 3, width = 7)

# Signif alterations over all genes
numalt <- ggplot(alt_chr, aes(x = chr, y = Freq, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(label = paste0(round(percentage, 1), "%")), 
    #position = position_stack(vjust = 0.5),
    #size = 3, 
    #color = "black") +
  labs(title = "Number of gene alterations across chromosomes",
    x = "Chromosome",
    y = "Number of genes",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9", "NO" = "yellow")) +
  theme_minimal()

print(numalt)
ggsave("results/numalt.png", plot = numalt, height = 3, width = 7)
```

Percentage

```{r}
# Plot the bar plot
pctdegs <- ggplot(tab_chr, aes(x = chr, y = pct, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(x = chr, y = tab_chr$total_freq + 1, label = tab_chr$total_freq),  # Adjust y position slightly above bars
            #vjust = -0.5,  # Align text at the top
            #hjust = 0.5,  # Center text horizontally
            #size = 3,  # Adjust text size for better visibility
            #color = "black") +  # Set text color to black
  labs(title = "Percentage of DEGs across chromosomes",
    x = "Chromosome",
    y = "Percentage",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9")) +
  theme_minimal()

print(pctdegs)
ggsave("results/pctdegs.png", plot = pctdegs, height = 3, width = 7)

# DEGs over all genes
pctdegsallgenes <- ggplot(all_chr, aes(x = chr, y = pct, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(x = chr, y = tab_chr$total_freq + 1, label = tab_chr$total_freq),  # Adjust y position slightly above bars
            #vjust = -0.5,  # Align text at the top
            #hjust = 0.5,  # Center text horizontally
            #size = 3,  # Adjust text size for better visibility
            #color = "black") +  # Set text color to black
  labs(title = "Percentage of DEGs across chromosomes",
    x = "Chromosome",
    y = "Percentage",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9", "NO" = "yellow")) +
  theme_minimal()

print(pctdegsallgenes)
ggsave("results/pctdegsallgenes.png", plot = pctdegsallgenes, height = 3, width = 7)

# Significant gene alterations over all chromosomes
pctaltgenes <- ggplot(alt_chr, aes(x = chr, y = pct, fill = cond)) +
  geom_bar(stat = "identity") +
  #geom_text(aes(x = chr, y = tab_chr$total_freq + 1, label = tab_chr$total_freq),  # Adjust y position slightly above bars
            #vjust = -0.5,  # Align text at the top
            #hjust = 0.5,  # Center text horizontally
            #size = 3,  # Adjust text size for better visibility
            #color = "black") +  # Set text color to black
  labs(title = "Percentage of gene alterations across chromosomes",
    x = "Chromosome",
    y = "Percentage",
    fill = NULL
  ) +
  scale_fill_manual(values = c("UP" = "#ed2939", "DOWN" = "#006fb9", "NO" = "yellow")) +
  theme_minimal()

print(pctaltgenes)
ggsave("results/pctaltgenes.png", plot = pctaltgenes, height = 3, width = 7)
```

# Comparing results

## Venn Diagram of DEGs

```{r}
# List of lists of DEGs
all_degs <- list(Original = degs_orig, Replication = degs)

# Genes common in both studies
intersec_degs <- degs[degs %in% degs_orig]

# Plotting
venn <- venn.diagram(
  x = all_degs,
  main = "DEGs from original paper\nand this replication",
  main.cex = 2,
  main.col = "darkgreen",
  main.fontfamily = "sans",
  
  filename = NULL, #returns grid object
  disable.logging = TRUE, #not saving logging file
  print.mode = c("raw","percent"),
  scaled = FALSE, #not scaled to size
  
  lwd = 3, #line width
  col = c('#0073ff', '#fde725'), #color of circ
  fill = c(alpha('#0073C2',0.3), alpha('#EFC000',0.3)), #color inside circ
  cex = 1.5, #size numbers
  fontfamily = "sans", #numbers font
  fontface = "bold",
  
  cat.cex = 2, #category size
  cat.default.pos = "outer", #location category text
  cat.pos = c(-30, 30), #degree around the circle for the text (0-360)
  cat.dist = c(0.05, 0.05), #distance of text from the border of circ
  cat.fontfamily = "sans", #category text font
  cat.col = c('#0073ff', '#fde725')
)

ggsave("results/venn.png", plot = venn, height = 7, width = 7) #recomended height = width for no distortion
plot_grid(venn)
```

# Functional analysis (enrichment) {#gsea}

```{r}
# DEGs lists
degs_ord_symbol <- rownames(degs_df[order(-degs_df$log2FoldChange),])
degs_ord_entrez <- all_features[match(degs_ord_symbol, all_features$external_gene_name),]$entrezgene_id

# DEGs log2fc lists
degs_ord_symbol_log2fc <- res_df[match(degs_ord_symbol, rownames(res_df)),]$log2FoldChange
names(degs_ord_symbol_log2fc) <- degs_ord_symbol

degs_ord_entrez_log2fc <- res_df[match(degs_ord_symbol, rownames(res_df)),]$log2FoldChange
names(degs_ord_entrez_log2fc) <- degs_ord_entrez

```

GO:0016322 -\> neuron remodelling / synaptic pruning

<https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html>

<https://r-graph-gallery.com/web-horizontal-barplot-with-labels-the-economist.html>

## Over representation analysis

GO (Gene Ontology) \~ 40,000 GO terms for Homo sapiens (2022)

```{r}
# Finding GO enriched sets
overGO <- list()
for (i in c("all", "BP", "CC", "MF")) {
  overGO[[i]] <- enrichGO(
    keyType = "SYMBOL", #there is no preference for using SYMBOL, ENSEMBL or ENTREZ!
    gene = degs_ord_symbol,
    universe = sample_genes, # sample genes. IMPORTANT!!!
    OrgDb = org.Hs.eg.db,
    ont = i,
    #pAdjustMethod = "bonferroni",
    pvalueCutoff = 0.05,
    qvalueCutoff = 0.05,
    readable = TRUE
  )
}

# Barplots 
BPbar <- barplot(overGO$BP, showCategory = 5) + 
  labs(title = "GO - Biological Process") +
  scale_fill_gradient(low = "#36013f", high = "lightblue")
CCbar <- barplot(overGO$CC, showCategory = 5) + 
  labs(title = "GO - Cellular Component") +
  scale_fill_gradient(low = "darkred", high = "pink")
MFbar <- barplot(overGO$MF, showCategory = 5) + 
  labs(title = "GO - Molecular Function") +
  scale_fill_gradient(low = "darkgreen", high = "lightgreen")

# Network plots
BPnet <- cnetplot(overGO$BP, foldChange = degs_ord_symbol_log2fc) + 
  labs(title = "GO - Biological Process") +
  theme(plot.title = element_text(hjust = 0.5))
CCnet <- cnetplot(overGO$CC, foldChange = degs_ord_symbol_log2fc) + 
  labs(title = "GO - Cellular Component") +
  theme(plot.title = element_text(hjust = 0.5))
MFnet <- cnetplot(overGO$MF, foldChange = degs_ord_symbol_log2fc) + 
  labs(title = "GO - Molecular Function") +
  theme(plot.title = element_text(hjust = 0.5))

# Circle plots (careful with order)
BPcirc <- cnetplot(overGO$BP, foldChange = degs_ord_symbol_log2fc, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "GO - Biological Process") +
  theme(plot.title = element_text(hjust = 0.5))
CCcirc <- cnetplot(overGO$CC, foldChange = degs_ord_symbol_log2fc, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "GO - Cellular Component") +
  theme(plot.title = element_text(hjust = 0.5))
MFcirc <- cnetplot(overGO$MF, foldChange = degs_ord_symbol_log2fc, circular = TRUE, colorEdge = TRUE) + 
  labs(title = "GO - Molecular Function") +
  theme(plot.title = element_text(hjust = 0.5))

# EMA plots
# egoBP_pt <- pairwise_termsim(overGO$BP)
# egoCC_pt <- pairwise_termsim(overGO$CC)
# egoMF_pt <- pairwise_termsim(overGO$MF)
# BPema <- emapplot(egoBP_pt)
# CCema <- emapplot(egoCC_pt)
# MFema <- emapplot(egoMF_pt)

# Grouping plots
combined_overGO <- plot_grid(
  BPbar, CCbar, MFbar, BPnet, CCnet, MFnet, BPcirc, CCcirc, MFcirc, 
  labels = "AUTO", label_size = 40) +   
  theme(plot.background = element_rect(fill = "white"))

ggsave("results/functional/combined_overGO.png", plot = combined_overGO, height = 35, width = 35)

# Individually saving plots for paper
ggsave("results/functional/BPbar.png", plot = BPbar, height = 4, width = 7)
ggsave("results/functional/CCbar.png", plot = CCbar, height = 4, width = 7)
ggsave("results/functional/MFbar.png", plot = MFbar, height = 4, width = 7)

ggsave("results/functional/BPnet.png", plot = BPnet, height = 8, width = 12)
ggsave("results/functional/CCnet.png", plot = CCnet, height = 8, width = 12)
ggsave("results/functional/MFnet.png", plot = MFnet, height = 8, width = 12)

```

KEGG

Weijun Luo and Cory Brouwer. Pathview: an R/Bioconductor package for pathway-based data integration and visualization. Bioinformatics, 29(14):1830-1831, 2013. doi: 10.1093/bioinformatics/btt285.

```{r}
################################
####     KEGG pathway       ####
################################

overKEGGpath <- enrichKEGG(
  gene = degs_ord_entrez,
  universe = sample_genes_entrez, #very important
  organism = 'hsa', #Homo sapiens
  keyType = "ncbi-geneid", #entrez-id
  pvalueCutoff = 0.05
  #readable = TRUE # there is no equivalent for this kegg function
)

for (i in 1:3) {
  KEGGimage <- pathview(
    gene.data  = degs_ord_entrez_log2fc,
    pathway.id = overKEGGpath@result$ID[i],
    species = "hsa",
    limit = list(gene = max(abs(degs_ord_entrez_log2fc)), cpd = 1),
    #kegg.native = FALSE, #creates pdf and also additional indications of protein interactions
    kegg.dir = "results/functional/"
  )
  #print(KEGGimage)
  #ggsave(paste0("results/KEGG_", overKEGGpath@result$ID[i], ".png"), plot = KEGGimage, height = 5, width = 5)
}

# Calcium channel pathway
# pathview(
#     gene.data  = degs_ord_entrez_log2fc,
#     pathway.id = "hsa04020",
#     species = "hsa",
#     limit = list(gene = max(abs(degs_ord_entrez_log2fc)), cpd = 1),
#     #kegg.native = FALSE, #creates pdf and also additional indications of protein interactions
#     kegg.dir = "results/functional/"
#   )

################################
####      KEGG module       ####
################################
overKEGGmodule <- enrichMKEGG(
  gene = degs_ord_entrez,
  universe = sample_genes_entrez, #very important
  organism = 'hsa', #Homo sapiens
  keyType = "ncbi-geneid", #entrez-id
  pvalueCutoff = 0.05
)

```

REACTOME

```{r}

overREACTOME <- enrichPathway(
  gene = degs_ord_entrez,
  organism = "human",
  universe = sample_genes_entrez, #important!
  pvalueCutoff = 0.05, 
  readable = TRUE
)
```

Are any of our genes of interest in any enriched subset?

```{r}
overGO$all@result$numIntGene <- sum(intGenes %in% strsplit(overGO$all@result$geneID[2], "/")[[1]])
```

## Gene set enrichment analysis

GO (gene ontology)

```{r}

# # Running
# gseGO <- list()
# for (i in c("BP", "CC", "MF")) {
#   gseGO[[i]] <- gseGO(
#     degs_ord_symbol_log2fc,
#     keyType = "SYMBOL",
#     OrgDb = org.Hs.eg.db,
#     eps = 1e-300, # more precise p-values
#     ont = i,
#     #minGSSize = 100,
#     #maxGSSize = 500,
#     pvalueCutoff = 0.05
#     #verbose = FALSE
#   )
# }
# 
# ################################
# ####   Biological process   ####
# ################################
# #gseaplot2(gseGO$BP, geneSetID = 1, title = paste0(gseGO$BP@result$Description[1], " - padj = ", signif(gseGO$BP@result$p.adjust[1], digits=2)))
# 
# if(nrow(gseGO$BP@result) > 0){
#   # gsea plot
#   gsea_plot <- gseaplot2(
#     gseGO$BP, 
#     geneSetID = 1:ifelse(nrow(gseGO$BP@result) > 4, 5, nrow(gseGO$BP@result)), 
#     title = "Top 5 enriched Biological processes (smallest padj)",
#     #color = c("",""), #define line colors
#     pvalue_table = TRUE
#   )
#   ggsave("results/functional/BPgsea.png", plot = gsea_plot, height = 6, width = 9)
#   
#   # dot plot
#   dot_plot <- dotplot(gseGO$BP, showCategory = ifelse(nrow(gseGO$BP@result) > 29, 30, nrow(gseGO$BP@result)), title = "dot plot") #what is the ranking system here???? (não achei em nenhuma das colunas)
#   ggsave("results/functional/BPdotplot.png", plot = dot_plot, height = 10, width = 5) # e onde ta o gene ratio???
#   
# }else{
#   print("No enriched GO - biological process sets by GSEA")
# }
# ################################
# ####   Cellular component   ####
# ################################
# if(nrow(gseGO$CC@result) > 0){
#   # gsea plot
#   gsea_plot <- gseaplot2(
#     gseGO$CC, 
#     geneSetID = 1:ifelse(nrow(gseGO$CC@result) > 4, 5, nrow(gseGO$CC@result)), 
#     title = "Top 5 enriched Cellular components (smallest padj)",
#     pvalue_table = TRUE
#   )
#   ggsave("results/functional/CCgsea.png", plot = gsea_plot, height = 6, width = 9)
#   
#   # dot plot
#   dot_plot <- dotplot(gseGO$CC, showCategory = ifelse(nrow(gseGO$CC@result) > 29, 30, nrow(gseGO$CC@result)), title = "dot plot")
#   ggsave("results/functional/CCdotplot.png", plot = dot_plot, height = 10, width = 5)
# }else{
#   print("No enriched GO - cellular component sets by GSEA")
# }
# 
# ################################
# ####   Molecular function   ####
# ################################
# if(nrow(gseGO$MF@result) > 0){
#   # gsea plot
#   gsea_plot <- gseaplot2(
#     gseGO$MF, 
#     geneSetID = 1:ifelse(nrow(gseGO$MF@result) > 4, 5, nrow(gseGO$MF@result)), 
#     title = "Top 5 enriched Molecular functions (smallest padj)",
#     pvalue_table = TRUE
#   )
#   ggsave("results/functional/MFgsea.png", plot = gsea_plot, height = 9, width = 15)
#   
#   # dot plot
#   dot_plot <- dotplot(gseGO$MF, showCategory = ifelse(nrow(gseGO$MF@result) > 29, 30, nrow(gseGO$MF@result)), title = "dot plot")
#   ggsave("results/functional/MFdotplot.png", plot = dot_plot, height = 10, width = 5)
# }else{
#   print("No enriched GO - molecular function sets by GSEA")
# }
```

KEGG

```{r}
# ################################
# ####     KEGG pathway       ####
# ################################
# gseKEGGpathway <- gseKEGG(
#   geneList = degs_ord_entrez_log2fc,
#   organism = 'hsa',
#   keyType = "ncbi-geneid",
#   #minGSSize = 120,
#   pvalueCutoff = 0.05,
#   verbose = FALSE
# )
# 
# ################################
# ####      KEGG module       ####
# ################################
# gseKEGGmodule <- gseMKEGG(
#   geneList = degs_ord_entrez_log2fc,
#   organism = 'hsa',
#   keyType = "ncbi-geneid",
#   #minGSSize = 120,
#   pvalueCutoff = 0.05,
#   verbose = FALSE
# )


```

REACTOME

```{r}

# gseREACTOME <- gsePathway(
#   degs_ord_entrez_log2fc,
#   organism = "human",
#   pvalueCutoff = 0.2,
#   by = "fgsea",
#   verbose = FALSE
# )
```

# Exporting results

INKscape para montar imagens pro paper.

```{r}
# Brute counts matrix
write.csv(cts_brute, file = "results/tables/bruteCts.csv")
# Filtered counts matrix
write.csv(cts, file = "results/tables/filtCts.csv")

# Filtered gene annotations
write.csv(all_features, file = "results/tables/geneAnnot.csv")

# Brute metadata
write.csv(meta_brute, file = "results/tables/bruteMeta.csv")
# Cleaned metadata
write.csv(meta, file = "results/tables/cleanMeta.csv")

# Differential expression results
write.csv(res_df, file = "results/tables/DEres.csv")
# DEGS data frame
write.csv(degs_df, file = "results/tables/DEGs.csv")

# Functional analysis results
#write.csv()
```

# Alternative analysis

Despite indecisiveness if samples from the same donor should have been collapsed (added together) we decided to repeat the differential expression analysis like the original paper has, with all samples separated . However, we also performed the following alternative analysis below for comparison.

## Collapsing replicates (by donor)

```{r}
# Meta collapsed
meta_collapsed <- meta[,c("Age","BIOMATERIAL_PROVIDER","condition","donor")]
meta_collapsed <- meta_collapsed[!duplicated(meta$donor),]
rownames(meta_collapsed) <- meta_collapsed$donor
meta_collapsed <- subset(meta_collapsed, select = -donor)

# cts collapsed (improve)
cts_collapsed <- data.frame(matrix(nrow = nrow(cts), ncol = nlevels(meta$donor)))
colnames(cts_collapsed) <- levels(meta$donor)
rownames(cts_collapsed) <- rownames(cts)
for (i in levels(meta$donor)) {
  cts_collapsed[,i] <- rowSums(cts[, meta$donor == i])
}

# Re-ordering meta_collapsed rows
meta_collapsed <- meta_collapsed[order(meta_collapsed$condition),] 

# Re-ordering cts_collapsed columns
cts_collapsed <- cts_collapsed[,match(rownames(meta_collapsed), colnames(cts_collapsed))]

######################
#   Running DESeq2   #
######################

# Verifying colnames and rownames match
all(colnames(cts_collapsed) == rownames(meta_collapsed))

# Running
dds_collapsed <- DESeqDataSetFromMatrix(countData = cts_collapsed, colData = meta_collapsed, design = ~condition)
dds_collapsed <- DESeq(dds_collapsed)
res_collapsed <- results(dds_collapsed)
res_df_collapsed <- as.data.frame(res_collapsed)

# Getting normalized matrix
ntd_collapsed <- normTransform(dds_collapsed)
norm_df_collapsed <- as.data.frame(assay(ntd_collapsed))

######################
#  Identifying DEGs  #
######################

# Adding diffexpressed column to results df
res_df_collapsed$DEG <- "NO"
res_df_collapsed$DEG[res_df_collapsed$log2FoldChange > 1 & res_df_collapsed$padj < 0.05] <- "UP"
res_df_collapsed$DEG[res_df_collapsed$log2FoldChange < -1 & res_df_collapsed$padj < 0.05] <- "DOWN"
res_df_collapsed$DEG <- factor(res_df_collapsed$DEG)

# Top DEGs
degs_df_collapsed <- res_df_collapsed[!grepl("NO", res_df_collapsed$DEG),]
degs_df_collapsed <- degs_df_collapsed[order(-abs(degs_df_collapsed$log2FoldChange)),]
degs_collapsed <- rownames(degs_df_collapsed)
top20_collapsed <- rownames(head(degs_df_collapsed, 20))

#######################
# Print results table #
#######################

# Genes of interest
int_df_collapsed <- res_df_collapsed[rownames(res_df_collapsed) %in% intGenes,]
kable(int_df_collapsed[order(int_df_collapsed$padj),], format = "html", caption = "Complement genes of interest") %>%
  kable_styling()
#save_kable("complement_table.html", res_table)

# Top 20 DEGs
kable(degs_df_collapsed[1:20,], format = "html", caption = "Top 20 DEGs") %>%
  kable_styling()
#save_kable("degs.html", res_table)
```

## Collapsing replicates (by differentiation protocol)

```{r}

```

## Removing ATCC samples

```{r}

```

## Correcting batch effect

```{r}
ctsAdjCT <- ComBat_seq(
  as.matrix(cts[,meta$condition == "CT"]), 
  batch = meta[meta$condition == "DS",]$donor 
  )

ctsAdjDS <- ComBat_seq(
  as.matrix(cts[,meta$condition == "DS"]), 
  batch = meta[meta$condition == "DS",]$donor 
  )

ctsAdj <- cbind(ctsAdjCT, ctsAdjDS)
ctsAdj <- ctsAdj[,match(colnames(cts), colnames(ctsAdj))]
```

# Para a Amanda

```{r}
# Importando dados
femmal <- read.delim(file='All_DEGs_Healthy_Female_vs_Male.tsv')
femmal$celltype <- as.factor(femmal$celltype)

# Adicionando coluna chr e position
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes_amanda <- getBM(
  attributes = c("external_gene_name", "chromosome_name", "start_position", "end_position"),
  filters = "external_gene_name",
  values = femmal$Genes,
  mart = ensembl
)
genes_amanda$chromosome_name <- factor(genes_amanda$chromosome_name)
genes_amanda <- genes_amanda[genes_amanda$chromosome_name %in% c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y"),]
genes_amanda$chromosome_name <- factor(genes_amanda$chromosome_name, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y"))
genes_amanda$posit <- (genes_amanda$start_position + genes_amanda$end_position)/2

femmal$chr <- genes_amanda[match(femmal$Genes, genes_amanda$external_gene_name),"chromosome_name"]
femmal$posit <- genes_amanda[match(femmal$Genes, genes_amanda$external_gene_name),"posit"]
femmal <- drop_na(femmal)

# Adding alteration column
femmal$alterat <- "NO"
femmal$alterat[femmal$p_val_adj < 0.05 & femmal$avg_log2FC > 0] <- "UP"
femmal$alterat[femmal$p_val_adj < 0.05 & femmal$avg_log2FC < 0] <- "DOWN"
femmal$alterat <- as.factor(femmal$alterat)
# Adding alteration column
femmal$color[femmal$alterat == "NO"] <- "#cccccc"
femmal$color[femmal$alterat == "UP"] <- "#bb0c00"
femmal$color[femmal$alterat == "DOWN"] <- "#00AFBB"

# Lista de deseq results df for each celltype
res_dfs <- list()
for (i in levels(femmal$celltype)) {
  res_dfs[[i]] <- femmal[femmal$celltype == i,]
  res_dfs[[i]]$celltype <- factor(res_dfs[[i]]$celltype)
  #res_dfs[[i]]$highlight <- NA
}

# Plotting
for (i in res_dfs) {
  ########################
  #####  Manhattan  ######
  ########################
  manhat <- ggplot(i, aes(x = chr, y = avg_log2FC, color = alterat))+
    geom_jitter(size = 0.6)+
    labs(
      title = paste0("Significantly altered genes across chromosomes in ", levels(i$celltype)),
      x = "Chromosome",
      y = "Log2 Fold Change",
      color = NULL
    )+ 
    scale_color_manual(values = c("DOWN" = "#00AFBB", "NO" = "#aaaaaa", "UP" = "#bb0c00")) +
    theme(
      panel.background = element_rect(fill = "white"),
      panel.grid = element_line(color = "gray", linetype = "dotted")
    )#+
    #geom_text_repel(max.overlaps = Inf, color = "black", size = 2) # To show all labels
  
  ggsave(paste0("results/amanda/manhat_", levels(i$celltype), ".png"), plot = manhat, height = 5, width = 10)
  
  
  ########################
  #####  Karyoplot  ######
  ########################
  
  
  # Preparing the df
  local_res_df <- i[i$chr == "X",]
  local_res_df$chr <- paste0("chr", local_res_df$chr)
  View(local_res_df)
  
  # Selecting genes to highlight
  #aux1_df <- local_res_df[local_res_df$alterat != "NO",]
  #aux1_df <- aux1_df[order(-abs(aux1_df$log2FoldChange)),]
  #aux1_df <- aux1_df[1:5,] # top 5 highest signif log2fc
  #aux2_df <- local_res_df[rownames(local_res_df) %in% intGenes,] # genes of interest from chr21
  #local_highlight_df <- rbind(aux1_df, aux2_df)
  
  # Initializing save plot
  png(filename = paste0("results/amanda/karyoplot_", levels(i$celltype), ".png"), width = 1500, height = 500)
  
  # Plotting
  kp <- plotKaryotype(genome="hg38", chromosomes="chrX", main = paste0("Gene alterations in the X chromosome for ", levels(i$celltype)), cex = 2)
  
  kpAddCytobandLabels(kp, 
    force.all = TRUE, #all name sections of the chromosome
    srt = 90, 
    cex = 1, 
    col = c(rep("black", times = 7), "white", "black", "white", rep("black", times = 12), "white", "black", "white",  rep("black", times = 7), "white", rep("black", times = 5), "white", "black") #to contrast the backgorund better
  )
  
   kpPoints(kp, 
     data = local_res_df, 
     chr = "chrX", #local_res_df$chr, 
     x = local_res_df$posit, 
     y = local_res_df$avg_log2FC, 
     ymax = 7, #max(local_res_df$log2FoldChange), 
     ymin = -7, #min(local_res_df$log2FoldChange),
     #col = as.character(local_res_df$color),
     cex = 1.8
   )
  
  # kpAxis(kp, 
  #   ymax = 3, #max(local_res_df$log2FoldChange), 
  #   ymin = -3, #min(local_res_df$log2FoldChange),
  #   tick.pos = NULL, #c(0, max(local_res_df$log2FoldChange), min(local_res_df$log2FoldChange), max(local_res_df$log2FoldChange)/2, min(local_res_df$log2FoldChange)/2),
  #   numticks = 7, 
  #   cex = 0.9
  # )
  # 
  # kpAbline(kp, h = 0.5) # this might to be adjusted with kpAxis()
  # 
  # kpAddLabels(kp, 
  #   labels = "log2 Fold Change", 
  #   srt = 90, 
  #   pos = 1, 
  #   label.margin = 0.04,
  #   cex = 1.5
  #   #ymax = max(local_res_df$log2FoldChange), 
  #   #ymin = min(local_res_df$log2FoldChange)
  # )
  
  #kpPlotMarkers(kp, 
  #  chr = "chr21",
  #  x = local_highlight_df$position, 
  #  y = rescale(local_highlight_df$avg_log2FC, from = c(-3, 3), to = c(-4, 1)),
  #  labels = rownames(local_highlight_df), 
  #  cex = 1.2, 
  #  r0 = 0.8,
  #  line.color = NULL,
  #  text.orientation = "vertical",
  #  adjust.label.position = TRUE
  #)
  
  # Closing save plot
  dev.off()
  
}

```
